# import Team from 'team.graphql'
# import Activity from 'activity.graphql'
# import Status from 'enums.graphql'

type User {
  id: ID!
  createdAtMs: Int!
  updatedAtMs: Int!
  email: String!
  displayName: String!

  ### TEAMS ###
  # Relationships
  administeredTeams: [Team!] @relationship(type: "ADMINISTERS", direction: OUT)
  teams: [Team!] @relationship(type: "WORKS_ON", direction: IN)
  # Queries
  queryAdministeredTeams(isActive: Boolean): [Team!]
    @cypher(
      statement: """
      MATCH (this)-[:ADMINISTERS]->(team:Team {isActive: $isActive})
      RETURN team
      """
    )
  activeAdministeredDescendantTeams: [Team!]
    @cypher(
      statement: """
      MATCH (this)-[:ADMINISTERS]->(:Team {isActive: true})-[:INCLUDES]->(team:Team {isActive: true})
      RETURN team
      """
    )
  activeInheritedTeams: [Team!]
    @cypher(
      statement: """
      MATCH (this)-[:WORKS_ON]->(:Team {isActive: true})<-[:INCLUDES *1..]-(team: Team {isActive: true})
      RETURN team
      """
    )
  queryTeams(isActive: Boolean): [Team!]
    @cypher(
      statement: """
      MATCH (this)-[:WORKS_ON]->(team:Team {isActive: $isActive})
      RETURN team
      """
    )

  ### ACTIVITIES ###
  # Relationships
  ownedActivities: [Activity!] @relationship(type: "OWNS", direction: OUT)
  # Queries
  queryOwnedActivities(isActive: Boolean): [Activity!]
    @cypher(
      statement: """
      MATCH (this)-[:OWNS]->(activity:Activity {isActive: $isActive})
      RETURN activity
      """
    )
}
